# -*- coding: utf-8 -*-
"""370_Business_Analytics_Project_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iLZvkzUyZcrZ1b556I9LmKuldUUr9q4X
"""

import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix
import statsmodels.formula.api as smf
import numpy as np


bank_df = pd.read_csv("/content/bank_data.csv")

#print the header
print(bank_df.head())
print()

#print the descriptive statistics of the dataframe
print('The descriptive statistics for the full dataset: ')
print(bank_df.describe())
print()

#a histogram showing the count of subscribed customers
plt.hist(bank_df['subscribed'], bins= 2)
plt.title('Count of Subscribed Customers')
plt.ylabel('Number of Customers')
plt.xlabel('Is the Customer Subscribed?')
plt.show()
print()

#check for rows with missing data (value = "unknown" in this dataset)
print('Rows with missing data: ')
print(bank_df.loc[(bank_df == "unknown").any(axis = 1)])

#remove rows with missing data
#bank = bank_df.drop([])

#bar plot for ages of subscribed vs non-subscribed customers
#create a subset for subscribed customers
subsets = bank_df.loc[(bank_df['subscribed'] == 'yes')]
print('The descriptive statistics for a subset of the dataframe that only includes subscribed customers: ')
print(subsets.describe())
print()

#create a subset for non-subscribed customers
subsetn = bank_df.loc[(bank_df['subscribed'] == 'no')]
print('The descriptive statistics for a subset of the dataframe that only includes non-subscribed customers: ')
print(subsetn.describe())
print()

#drop the age outliers for subset s
print('Age outliers: ')
print(subsets.loc[bank_df['age']> 80])
#remove the outlier and the missing data row, square brackets are required to make the numbers a list
subsets= subsets.drop([1736, 1848])
print()

#drop the age outliers for subset n
print('Age outliers: ')
print(subsetn.loc[bank_df['age']> 80])
#remove the outlier and the missing data row, square brackets are required to make the numbers a list
subsetn= subsetn.drop([921, 1396, 1398])
print()

#create a box plot comparing income for married vs single customers
fig1, ax1 = plt.subplots()
ax1.set_title('Age for Subscribed vs Non-subscribed Customers')
ax1.boxplot([subsets['age'], subsetn['age'].values])
ax1.set_ylabel('Age')
ax1.set_xticklabels(['Subscribed Customers', 'Non-Subscribed Customers'])
plt.show
print()
print()

#hypothesis for the age of subscribed vs non-subscribed customers
print('H0: There is no significant difference in the age of subscribed customers compared to that of non-subscribed customers.')
print('H1: There is a significant difference in the age of subscribed customers compared to that of non-subscribed customers.')
print()
#t-tests for income
print('T-test results for difference in age between subscribed and non-subscribed customers(using a 0.05 significance level): ')
print(scipy.stats.ttest_ind(subsets['age'], subsetn['age']))
print()
#print the interpretations and concluions
print('Conclusion: Accept the null hypothesis and conclude that there is not significant difference in the age of\n            subscribed customers compared to non-subscribed customers.')
print()
print()

#create a logistic regression model with outcome variable 'subscribed' and independant variable 'flight_length'
model = LogisticRegression(solver= 'liblinear', random_state = 0)
x = bank_df [['campaign','previous']].values
y = bank_df ['subscribed'].values
model.fit(x, y)

#generate predicted probabilities by adding a new column
bank_df['logistic_prediction']= model.predict_proba(x)[:,1]

#print the header to look at logistic regression probabilities
print(bank_df.head())
print()

#look at the top people most likely to be subscribed
print('The 10 highest probabilities of subscribing:')
print(bank_df.nlargest(10, 'logistic_prediction'))
print()

#create and print a confusion matrix
the_median = bank_df['logistic_prediction'].median()
prediction = list(1 * bank_df['logistic_prediction'] > the_median)
bank_df.replace (('yes', 'no'), (1, 0), inplace=True)
actual = list(bank_df['subscribed'])
print('[true positive false positives]')
print ('[false negatives true negatives]')
print(confusion_matrix(prediction, actual))
print()

#save the confusion matrix
conf_mat = confusion_matrix(prediction, actual)

#calculate the precision
precision = conf_mat[0][0] / (conf_mat[0][0] + conf_mat[0][1])
print(f'Precision: {precision}')
print()

#calculate the recall
recall = conf_mat[0][0] / (conf_mat[0][0] + conf_mat[1][0])
print(f'Recall: {recall}')
print()