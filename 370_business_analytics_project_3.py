# -*- coding: utf-8 -*-
"""370_Business_Analytics_Project_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jqFV611vlLARDjIUolqg3KpVxVMGi26P

Title: Predicting income above 50k
By: Jalyn Buthman
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.preprocessing import StandardScaler


#modify pandas display options to show all columns and not wrap
pd.set_option('display.max_columns', None)
pd.set_option('display.expand_frame_repr', False)


#read in the dataset and print the descriptive statistics
data = pd.read_csv("/content/census_income.csv")
print(data.describe())
print()


#charts to visualize the distribution of the data
#a histogram showing income levels
plt.hist(data['income_above_50k'], bins= [-0.5, 0.5, 1.5], rwidth=.9)
plt.title('Distribution of People With an Income Above and Below 50k')
plt.ylabel('Number of People')
plt.xlabel('Income Category')
plt.xticks([0, 1], ['Income Below or Equal to 50k', 'Income Above 50k'])
plt.show()
print()

#check for rows with missing data (value = "unknown" in this dataset)
print('Rows with missing data: ')
missing = data.loc[(data['age'] == ' ?') | (data['education_level'] == ' ?') | (data['hours_per_week'] == ' ?') | (data['sex'] == ' ?' )]
print(missing)
print()
print()


#create a subset for women with an income above 50k
subsetw = data.loc[(data['sex'] == ' Female') & (data['income_above_50k'] == 1)]
print('The header for the subset that only includes women making more than 50k: ')
print(subsetw.head())
print()

#create a subset for men with an income above 50k
subsetm = data.loc[(data['sex'] == ' Male') & (data['income_above_50k'] == 1)]
print('The header for the subset that only includes men making more than 50k: ')
print(subsetm.head())
print()

#Bar chart to visualizpeople who make more than 50k by sex
count_women = len(subsetw)
count_men = len(subsetm)
plt.bar(['Female', 'Male'], [count_women, count_men])
plt.xlabel ('Sex')
plt.ylabel ('Frequency')
plt.title('Distribution of Income Above 50k by Sex')
plt.show()
print()

#Histogram to visualize people who make more than 50k by age
above_50k = data[data['income_above_50k'] == 1]
below_50k = data[data['income_above_50k'] == 0]

plt.hist(above_50k['age'], bins=20, label='Income > 50k', rwidth=.9)
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Distribution of Income Above 50k by Age')
plt.show()
print()

#Histogram to visualize people making more than 50k by education level
above_50k = data[data['income_above_50k'] == 1]
below_50k = data[data['income_above_50k'] == 0]

plt.hist(above_50k['education_level'], bins=20, label='Income > 50k', rwidth=.9)
plt.xlabel('Education Level')
plt.ylabel('Frequency')
plt.title('Distribution of Income Above 50k by Education Level')
plt.show()
print()

#Chart to visualize people making more than 50k by hours per week
above_50k = data[data['income_above_50k'] == 1]
below_50k = data[data['income_above_50k'] == 0]

plt.hist(above_50k['hours_per_week'], bins=20, label='Income > 50k', rwidth=.9)
plt.xlabel('Hours Per Week')
plt.ylabel('Frequency')
plt.title('Distribution of Income Above 50k by Average Hours Worked Per Week')
plt.show()
print()


#use supervised learning to make predictions
#convert the sex column from categorical to numerical
data.replace ((' Female', ' Male'), (1, 0), inplace=True)

#set up the variables for the model
x= data[['age', 'education_level', 'hours_per_week','sex']]
y = data['income_above_50k']

k= 15
newage = 35
neweducation_level = 10
newhours = 30
newsex = 1
target_values = [[newage, neweducation_level, newhours, newsex]]

scaler = StandardScaler()
x_scaled = scaler.fit_transform(x)

#nearest neighbor
from sklearn.neighbors import KNeighborsClassifier
knnclassifier = KNeighborsClassifier(n_neighbors = k)
knnclassifier.fit (x_scaled, y)
print('K Nearest Neighbors prediction of income above or below 50k: ')
scaled_target_values = scaler.transform(target_values)
print(knnclassifier.predict(np.array(scaled_target_values)))
print()

#decision tree
from sklearn.tree import DecisionTreeClassifier
dtclassifier = DecisionTreeClassifier (max_depth = 3)
dtclassifier.fit (x, y)
print('My decision tree prediction of income above or below 50k: ')
print(dtclassifier.predict(np.array(target_values)))
print()

#random forest
from sklearn.ensemble import RandomForestClassifier
rfclassifier = RandomForestClassifier()
rfclassifier.fit(x, y)
print('Random forest prediction of income above or below 50k: ')
print(rfclassifier.predict(target_values))
print()


#neural network
from sklearn.neural_network import MLPClassifier
nnclassifier = MLPClassifier()
nnclassifier.fit(x, y)
print('Neural network prediction of income above or below 50k: ')
print(nnclassifier.predict(target_values))
print()


#create a 75%/25% train-test split of the data, print the prediction scores for each model
from sklearn.model_selection import train_test_split
trainingx, testx, trainingy, testy = train_test_split(x, y, random_state = 1)

#K nearest neighbor error prediction
knnclassifier = KNeighborsClassifier(n_neighbors = 15)
knnclassifier.fit(trainingx, trainingy)
predicted = knnclassifier.predict(testx)
predictionerror = abs(predicted - testy)
print('Nearest neighbor prediction error score: ')
print(np.mean(predictionerror))
print()

#decision trees error prediction
dtclassifier = DecisionTreeClassifier(max_depth = 3)
dtclassifier.fit (trainingx, trainingy)
predicted = dtclassifier.predict(testx)
predictionerror = abs(predicted - testy)
print('Decision Tree prediction error score: ')
print(np.mean(predictionerror))
print()

#random forest error prediction
rclassifier = RandomForestClassifier(random_state = 1)
rclassifier.fit (trainingx, trainingy)
predicted = rfclassifier.predict(testx)
predictionerror = abs(predicted - testy)
print('Random forest prediction error score: ')
print(np.mean(predictionerror))
print()

#neural network error prediction
nnclassifier = MLPClassifier()
nnclassifier.fit (trainingx, trainingy)
predicted = rfclassifier.predict(testx)
predictionerror = abs(predicted - testy)
print('Neural network prediction error score: ')
print(np.mean(predictionerror))
print()



#Supervised Learning Predictions
print('Variables for Prediction 1')
print('Age: 35')
print('Education Level: 10')
print('Hours Worked per Week: 30')
print('Sex: Female')
print()

print('Random Forest Prediction 1: This individual is predicted to make $50,000 or less annually.')
print('Neural Network Prediction 1: This individual is predicted to make $50,000 or less annually.')
print()

print('Variables for Prediction 2')
print('Age: 47')
print('Education Level: 12')
print('Hours Worked per Week: 40')
print('Sex: Male')
print()

print('Random Forest Prediction 2: This individual is predicted to make $50,000 or less annually.')
print('Neural Network Prediction 2: This individual is predicted to make more than $50,000 annually.')
print()

print('Observations from The Above Models and Their Predictions')
print('Even though the Random Forest and Neural Network models have the same error prediction score, they may produce opposite predictions as seen above.')
print('We must keep in mind that their error prediction score is low but not zero, so their resulting predictions must be used mindfully as they are not perfect.')
print()