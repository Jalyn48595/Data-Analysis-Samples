# -*- coding: utf-8 -*-
"""370_Business_Analytics_Project_Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wS4S73AHxohV11UGPNX0QJUCkDN4IU-o
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

#modify pandas display options to show all columns and not wrap
pd.set_option('display.max_columns', None)
pd.set_option('display.expand_frame_repr', False)


#read in the dataset and print the descriptive statistics
sales = pd.read_csv("/content/Warehouse_and_Retail_Sales.csv")
print(sales.describe())
print()


#charts to visualize the distribution of the data
#a bar chart showing the distribution of retail sales
plt.hist(sales['RETAIL_SALES'], bins=100)
plt.xlabel('Retail Sales')
plt.ylabel('Frequency')
plt.title('Distribution of Retail Sales')
plt.show()
print()

#a bar chart showing the distribution of warehouse sales
plt.hist(sales['WAREHOUSE_SALES'], bins=50)
plt.xlabel('Warehouse Sales')
plt.ylabel('Frequency')
plt.title('Distribution of Warehouse Sales')
plt.show()
print()

#drop item codes with numbers
sales.drop(index=[48520, 112592, 134269, 138148, 156284, 156447, 172150], inplace=True)

#check for and remove rows with missing data
# missing = sales.loc[sales.isnull().any(axis=1)]
# print('Rows with missing data: ')
# print(missing)
data_updated= sales.loc[~sales.isnull().any(axis=1)]
print('Rows with missing data remaining: ')
check = data_updated.loc[data_updated.isnull().any(axis=1)]
print(check)
print()

#make a copy of the dataframe to avoid later errors
data = data_updated.copy()

#a bar chart comparing retail and warehouse sales
channels = data[['RETAIL_SALES', 'WAREHOUSE_SALES']].sum()
channel_types = channels.index
counts = channels.values

plt.bar(channel_types, counts)
plt.xlabel('Channel Type')
plt.ylabel('Count')
plt.title('Count of Retail vs Warehouse Sales')
plt.show()
print()


#Distribution of retail sales across months
retail_month = data.groupby('MONTH')['RETAIL_SALES'].sum()
plt.bar(retail_month.index, retail_month.values)
plt.xlabel('Month')
plt.xticks(range(int(min(retail_month.index)), int(max(retail_month.index)) + 1))
plt.ylabel('Retail Sales')
plt.title('Distribution of Retail Sales Across Months')
plt.show()
print()

#Distribution of warehouse sales across months
warehouse_month = data.groupby('MONTH')['WAREHOUSE_SALES'].sum()
plt.bar(warehouse_month.index, warehouse_month.values)
plt.xlabel('Month')
plt.xticks(range(int(min(retail_month.index)), int(max(retail_month.index)) + 1))
plt.ylabel('Warehouse Sales')
plt.title('Distribution of Warehouse Sales Across Months')
plt.show()
print()


# Convert the supplier column from categorical to numerical
data['SUPPLIER'] = data['SUPPLIER'].astype('category').cat.codes
print(data.head())
print()

# Convert the item type column from categorical to numerical
data['ITEM_TYPE'] = data['ITEM_TYPE'].astype('category').cat.codes
print(data.head())
print()



#supervised learning to make predictions
#set up the variables for the model
x= data[['YEAR', 'MONTH', 'ITEM_CODE','RETAIL_TRANSFERS']]
y = data['RETAIL_SALES']

k= 15
newyear = 2018
newmonth = 11
newcode = 1001
newtransfers = 1
target_values = [[newyear, newmonth, newcode, newtransfers]]
#nearest neighbor
from sklearn.neighbors import KNeighborsRegressor
knnregressor = KNeighborsRegressor(n_neighbors = k)
knnregressor.fit (x, y)
print('K Nearest Neighbors prediction of retail sales: ')
print(knnregressor.predict(np.array(target_values)))
print()

#decision tree
from sklearn.tree import DecisionTreeRegressor
dtregressor = DecisionTreeRegressor (max_depth = 3)
dtregressor.fit (x, y)
print('Decision tree prediction of retail sales: ')
print(dtregressor.predict(np.array(target_values)))
print()

#random forest
from sklearn.ensemble import RandomForestRegressor
rfregressor = RandomForestRegressor()
rfregressor.fit(x, y)
print('Random forest prediction retail sales: ')
print(rfregressor.predict(target_values))
print()


#neural network
from sklearn.neural_network import MLPRegressor
nnregressor = MLPRegressor()
nnregressor.fit(x, y)
print('Neural network prediction of retail sales: ')
print(nnregressor.predict(target_values))
print()


#create a 75%/25% train-test split of the data, print the prediction scores for each model
from sklearn.model_selection import train_test_split
trainingx, testx, trainingy, testy = train_test_split(x, y, random_state = 1)

#K nearest neighbor error prediction
knnregressor = KNeighborsRegressor(n_neighbors = 15)
knnregressor.fit(trainingx, trainingy)
predicted = knnregressor.predict(testx)
predictionerror = abs(predicted - testy)
print('Nearest neighbor prediction error score: ')
print(np.mean(predictionerror))
print()

#decision trees error prediction
dtregressor = DecisionTreeRegressor(max_depth = 3)
dtregressor.fit (trainingx, trainingy)
predicted = dtregressor.predict(testx)
predictionerror = abs(predicted - testy)
print('Decision Tree prediction error score: ')
print(np.mean(predictionerror))
print()

#random forest error prediction
rfregressor = RandomForestRegressor(random_state = 1)
rfregressor.fit (trainingx, trainingy)
predicted = rfregressor.predict(testx)
predictionerror = abs(predicted - testy)
print('Random forest prediction error score: ')
print(np.mean(predictionerror))
print()

#neural network error prediction
nnregressor = MLPRegressor()
nnregressor.fit (trainingx, trainingy)
predicted = rfregressor.predict(testx)
predictionerror = abs(predicted - testy)
print('Neural network prediction error score: ')
print(np.mean(predictionerror))
print()